Time Complexity Assessment

"""
TASK0
"""

def task0():
    """
    Time Complexity Analysis:

    Function run-time does not depend on size of input(n)
    Thus, the script runs on an order of O(1)

    """
    first_text = texts[0]
    last_call = calls[-1]

    print("First record of texts, {} texts {} at time {}"\
        .format(first_text[0], first_text[1], first_text[2]))
    print("Last record of calls, {} calls {} at time {}, lasting {} seconds"\
        .format(last_call[0], last_call[1], last_call[2], last_call[3]))

    return None

"""
TASK1
"""

def task1():
    """
    Time Complexity Analysis:

    The function contains 2 for loops which has an order of O(n) as the number of operations (N) is linearly
    proportional to the size of the input(n). By rules of approximation, the order for this function is O(n)
    """
    telephone_numbers = set()
    for record in texts:
        telephone_numbers.add(record[0])
        telephone_numbers.add(record[1])
    for record in calls:
        telephone_numbers.add(record[0])
        telephone_numbers.add(record[1])

    print("There are {count} different telephone numbers in the records."\
        .format(count = len(telephone_numbers)))

    return None

"""
TASK2
"""

def task2():
    '''
    Time Complexity Analysis:

    This function contains a for loop going through the keys within the dictionary object and replacing the
    key with cumulative summation of the duration of each calls with a certain unique number found within the
    calls variable. This function runs on the order of O(n)
    '''

    telephone_numbers = dict()

    for record in calls:
        telephone_numbers[record[0]] = telephone_numbers.get(record[0], 0) + int(record[-1])
        telephone_numbers[record[1]] = telephone_numbers.get(record[1], 0) + int(record[-1])
    num_with_max_call = sorted(telephone_numbers, reverse=True, key=lambda x: telephone_numbers[x])[0]
    print("{} spent the longest time, {} seconds, on the phone during September 2016."\
        .format(num_with_max_call, telephone_numbers[num_with_max_call]))

    return None

"""
TASK3
"""

""" PART A """

def task3partA():
    """
    Time Complexity Analysis:

    Function contains a for loop follow by multiple nested if conditioning and subsequent elifs. The order
    by which this function will run is O(n)
    """

    telephone_codes = set()

    for record in calls:
      if record[0].startswith("(080)"):
          if record[1].startswith("("):
              telephone_codes.add(record[1][record[1].index("(") + 1 : record[1].index(")")])
          elif record[1].startswith("7") or record[1].startswith("8") or record[1].startswith("9"):
              telephone_codes.add(record[1][:4])
          elif record[1].startswith("140"):
              telephone_codes.add("140")
          else:
              pass

    telephone_codes = sorted(telephone_codes)

    print("The numbers called by people in Bangalore have codes:")
    for idx in range(len(telephone_codes)):
        print(telephone_codes[idx])

    return None

""" PART B """

def task3partB():
    """
    Time Complexity Analysis:

    Function contains a for loop follow by multiple nested if conditioning and subsequent elifs. The order
    by which this function will run is O(n)
    """

    count_caller = 0
    count_receiver = 0

    for record in calls:
        if record[0].startswith("(080)"):
            count_caller += 1
            if record[1].startswith("(080)"):
                count_receiver += 1
            else:
                pass
        else:
            continue

    percentage = (count_receiver / count_caller) * 100
    print("{:.2f} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore."\
      .format(percentage))

    return None

"""
TASK4
"""

def task4():
    """
    Time Complexity Analysis:

    Function contains 2 for loops and by approximation, this function runs on the order of O(n)
    """

    caller_numbers = set()
    non_telemarketer_numbers = set()

    for record in texts:
        non_telemarketer_numbers.add(record[0])
        non_telemarketer_numbers.add(record[1])

    for record in calls:
        caller_numbers.add(record[0])
        non_telemarketer_numbers.add(record[1])

    telemarketer_numbers = caller_numbers.difference(non_telemarketer_numbers)
    telemarketer_numbers = sorted(telemarketer_numbers)

    print("These numbers could be telemarketers: ")
    for num in telemarketer_numbers:
        print(num)

    return None
