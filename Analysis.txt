Time Complexity Assessment
# Analysis of Run Time is Marked within Comments under Functions and
# specified as "Run Time Analysis ="

"""
TASK 0:
What is the first record of texts and what is the last record of calls?
Print messages:
"First record of texts, <incoming number> texts <answering number> at time <time>"
"Last record of calls, <incoming number> calls <answering number> at time <time>, lasting <during> seconds"
"""

def test():
    """
    Run-time Analysis = O(1)
    """
    first_text = texts[0]
    last_call = calls[-1]

    print("First record of texts, {} texts {} at time {}"\
        .format(first_text[0], first_text[1], first_text[2]))
    print("Last record of calls, {} calls {} at time {}, lasting {} seconds"\
        .format(last_call[0], last_call[1], last_call[2], last_call[3]))

    return None

# O(1)
if __name__ == "__main__":
    test()

"""
TASK 1:
How many different telephone numbers are there in the records?
Print a message:
"There are <count> different telephone numbers in the records."
"""

def flatten(l):
    """
    Function to extract only valid telephone entries from records provided as list
    Run Time Analysis = O(n^2)
    """
    flat_list = [j for i in l for idx, j in enumerate(i) if idx in (0,1)]

    return flat_list

def test():
    """
    By storing flattened list in a single lis tand converting to set to retrieve unique counts
    Run Time Analysis = O(n^2 + n^2 + 4) -> O(2n^2 + 4) -> O(n^2)
    """
    tmp_text = flatten(texts)
    tmp_call = flatten(calls)
    num_records = tmp_text + tmp_call
    count = len(set(num_records))
    print("There are {} different telephone numbers in the records."\
        .format(count))

    return None

# O(1)
if __name__ == "__main__":
    test()

"""
TASK 2: Which telephone number spent the longest time on the phone
during the period? Don't forget that time spent answering a call is
also time spent on the phone.
Print a message:
"<telephone number> spent the longest time, <total time> seconds, on the phone during
September 2016.".
"""

def maxCall(l):
    '''
    Function to segregate caller, receiver and duration of calls in each records
    Run Time Analysis = O(n^2 + n + 5 + 3n + 1 + n + 1) -> O(n^2 + 5n + 7) -> O(n^2)
    '''
    tmp_list = [j for i in l for idx, j in enumerate(i) if idx in (0, 1, 3)]
    num_list = [j for idx, j in enumerate(tmp_list) if idx % 3 != 2]
    unique_num_list = set(num_list)
    caller_list = num_list[0::2]
    receiver_list = num_list[1::2]
    duration_list = tmp_list[2::3]

    telephone_dict = dict.fromkeys(unique_num_list, 0)

    for caller, receiver, duration in zip(caller_list, receiver_list, duration_list):
        telephone_dict[caller] += int(duration)
        telephone_dict[receiver] += int(duration)

    max_duration = max(telephone_dict.values())
    max_telephone = [num for num, duration in telephone_dict.items() if duration == max_duration]

    print("{} spent the longest time, {} seconds, on the phone during September 2016.".format(max_telephone[0], max_duration))

    return None

# O(1)
if __name__ == "__main__":
    maxCall(calls)

"""
TASK 3:
(080) is the area code for fixed line telephones in Bangalore.
Fixed line numbers include parentheses, so Bangalore numbers
have the form (080)xxxxxxx.)

Part A: Find all of the area codes and mobile prefixes called by people
in Bangalore.
 - Fixed lines start with an area code enclosed in brackets. The area
   codes vary in length but always begin with 0.
 - Mobile numbers have no parentheses, but have a space in the middle
   of the number to help readability. The prefix of a mobile number
   is its first four digits, and they always start with 7, 8 or 9.
 - Telemarketers' numbers have no parentheses or space, but they start
   with the area code 140.

Print the answer as part of a message:
"The numbers called by people in Bangalore have codes:"
 <list of codes>
The list of codes should be print out one per line in lexicographic order with no duplicates.

Part B: What percentage of calls from fixed lines in Bangalore are made
to fixed lines also in Bangalore? In other words, of all the calls made
from a number starting with "(080)", what percentage of these calls
were made to a number also starting with "(080)"?

Print the answer as a part of a message::
"<percentage> percent of calls from fixed lines in Bangalore are calls
to other fixed lines in Bangalore."
The percentage should have 2 decimal digits
"""

""" PART A """
def getAreaCode(num):
    """
    Function to retrieve Area Codes of Fixed Telephone Lines
    Run Time Analysis = O(3) -> O(1)
    """
    tmp_idx = (num.index("("), num.index(")"))
    area_code = num[tmp_idx[0] : tmp_idx[-1] + 1]

    return area_code

def getMobilePrefix(num):
    """
    Function to retrieve Mobile Prefixes from Mobile Numbers
    Run Time Analysis = O(1)
    """
    return num[:5]

def flatten(l):
    """
    Function to extract only valid telephone entries from records provided as list
    Run Time Analysis = O(n^2)
    """
    flat_list = [j for i in l for idx, j in enumerate(i) if idx in (0,1)]

    return flat_list

def partA():
    """
    Run Time Analysis = O(2 + n^2 + 5n + 3 + 1 + 2 + 1 + 2n + 2n) -> O(n^2 + 9n + 9) -> O(n^2)
    """
    area_codes = []
    mobile_prefixes = []

    flat_list = flatten(calls)

    for num in flat_list:
        if num.startswith("("):
            area_codes.append(getAreaCode(num))
        elif num.startswith("7") or num.startswith("8") or num.startswith("9"):
            mobile_prefixes.append(getMobilePrefix(num))
        else:
            continue

    area_codes = sorted(set(area_codes))
    mobile_prefixes = sorted(set(mobile_prefixes))

    print("The numbers called by people in Bangalore have codes:")
    for num in area_codes:
      print(num)
    for num in mobile_prefixes:
      print(num)

    return None

""" PART B """

def partB():
    """
    Run Time Analysis = O(n^2 + 4 + 5n + 3) -> O(n^2 + 5n + 7) -> O(n^2)
    """
    flat_list = flatten(calls)
    caller_list = flat_list[0::2]
    receiver_list = flat_list[1::2]

    total_calls = len(calls)
    count = 0

    for caller, receiver in zip(caller_list, receiver_list):
        if caller.startswith("(") and receiver.startswith("("):
            count += 1
        else:
            continue

    percentage = (count / total_calls) * 100
    print("{:.2f} percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore."\
      .format(percentage))

    return None

# O(1)
if __name__ == "__main__":
    partA()
    partB()

"""
TASK 4:
The telephone company want to identify numbers that might be doing
telephone marketing. Create a set of possible telemarketers:
these are numbers that make outgoing calls but never send texts,
receive texts or receive incoming calls.

Print a message:
"These numbers could be telemarketers: "
<list of numbers>
The list of numbers should be print out one per line in lexicographic order with no duplicates.
"""

"""
Assuming that telemarketer numbers that start with code "140" is not required by question
"""

def flatten(l):
    """
    Function to extract only valid telephone entries from records provided as list
    Run Time Analysis = O(n^2)
    """
    flat_list = [j for i in l for idx, j in enumerate(i) if idx in (0,1)]

    return flat_list

def test():
    """
    Run Time Analysis = O(1 + n^2 + 2 + 8n + 2 + 2n + 1) - > O(n^2 + 10n + 6) -> O(n^2)
    """
    telemarketer_list = []

    text_list = flatten(texts)
    call_list = flatten(calls)
    caller_list = call_list[0::2]
    receiver_list = call_list[1::2]

    for num in caller_list:
        if num not in text_list:
            if num not in receiver_list:
                telemarketer_list.append(num)
            else:
                continue
        else:
            continue

    telemarketer_list = sorted(set(telemarketer_list))

    print("These numbers could be telemarketers: ")
    for num in telemarketer_list:
        print(num)

    return None

# O(1)
if __name__ == "__main__":
    test()